package main

import (
	"os"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const hTemplCode = `
// This file is generated by tool, DONT EDIT IT
// Source: [[{{.SourceFile}}]]

#include <cstdlib>
#include <cstdint>

//as decl
class asIScriptEngine;	//engine
class asIScriptGeneric;	//gen

namespace {{.ProtoName}} {
{{ range .ClassDefinations}}

class {{.ClassName}} {
public:
	{{range .Fields}}
	{{.TypeName}} Get{{.FieldName}}() const;
	void Set{{.FieldName}}({{.TypeName}} value);
	{{end}}

	//nested messages
	{{range .Messages}}
	{{end}}

	void RegisterToAngelScript(asIScriptEngine *engine);
private:
	bool 	Valid;
	uint64_t	DirtyMask;
	
	{{range .Fields}}
	{{.TypeName}} {{.FieldName}}_;
	{{end}}
};

{{end}}


void RegisterToAngelScript(asIScriptEngine *engine);
}
`

const cppTemplCode = `
// This file is generated by tool, DONT EDIT IT
// Source: [[{{.SourceFile}}]]

#include <angelscript.h>
{{range .BracketIncludings}}#include <{{.}}>
{{end}}

{{ range .ClassDefinations}}

#pragma region "{{.ClassName}}"

std::string {{.ClassName}}::Serialize() const {
	return "";
}

bool {{.ClassName}}::Unserialize(std::string_view _view) {
	return true;
}

{{end}}

#pragma endregion

void RegisterToAngelScript(asIScriptEngine *engine) {
{{ range .ClassDefinations}}
	{{.ClassName}}::RegisterToAngelScript(engine);
{{end}}
}
`

func generateAs(gen *protogen.Plugin, file *protogen.File) {
	templ, err := template.New("ash").Parse(hTemplCode)
	if err != nil {
		return
	}

	templ, err = template.New("ascpp").Parse(cppTemplCode)
	if err != nil {
		return
	}

	var cpp = ParsedStruct{
		SourceFile: "game.proto",
	}
	templ.Execute(os.Stdout, cpp)
}
