package main

const hRpcStubCodeHClient = `
// This file is generated by tool, DONT EDIT IT
// Source: [[{{.SourceFile}}]]

namespace {{.PackageName}} {

class IMessageDispatcher {
public:
	virtual ~IMessageDispatcher() = default;
	virtual void foo() = 0;
	virtual int bar() = 0;
};
	
class FDispatcherStub {
public:
	FDispatcherStub(IMessageDispatcher *md);
	void DoDispatch(const TArray<uint8>& msg) const;
private:
	TSharedPtr<IMessageDispatcher> Mdref;
	
	uint32 SessionId;

{{- range .SvMethods}}
	void On{{.MethodName}} ( const TArray<uint8>& bytes );
{{- end}}
};
`

const hRpcStubCodeCppClient = `
// This file is generated by tool, DONT EDIT IT
// Source: [[{{.SourceFile}}]]

namespace {{.PackageName}} {

FDispatcherStub::FDispatcherStub(IMessageDispatcher *md): Mdref(md) {

}

void FDispatcherStub::DoDispatch(const TArray<uint8>& msg) const {
	game::Package pkg;
	pkg.ParseFromArray(msg.GetData(), msg.Num());
	if (pkg.sessionid() > 0)
	{
		//assert route==""
		return;
	}
	
	if (false) {}
{{- range .SvMethods}}
	else if (route == "foo") {
		On{{.MethodName}}(msg);
	}
{{- end }}
};
`
